{"version":3,"sources":["serviceWorker.js","home/App.js","list/List.js","detail/Detail.js","index.js"],"names":["Boolean","window","location","hostname","match","App","className","type","genData","dataArr","i","push","id","icon","text","price","Demo","props","state","refreshing","down","height","document","documentElement","clientHeight","data","this","history","pathname","hei","ReactDOM","findDOMNode","ptr","offsetTop","setTimeout","setState","damping","ref","el","style","overflow","indicator","deactivate","direction","onRefresh","columnNum","hasLine","renderItem","dataItem","padding","src","width","alt","onClick","change","alert","clear","React","Component","Detail","goodsID","params","imgHeight","paddingTop","autoplay","infinite","beforeChange","from","to","console","log","afterChange","index","map","val","key","href","display","verticalAlign","onLoad","dispatchEvent","Event","size","Header","title","Body","render","basename","exact","path","component","Home","List","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd5961b6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\n//import UserInfoPage from './pages/user/UserInfoPage'\nimport './App.css';\nimport { Button, List } from 'antd-mobile';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Route exact path='/' component={Home}/>\n      <Route path='/UserInfoPage' component={UserInfoPage}/> */}\n      <Button type=\"warning\">warning</Button>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint no-dupe-keys: 0, no-mixed-operators: 0 */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PullToRefresh, Button,Grid } from 'antd-mobile';\nimport './List.css';\n\nfunction genData(prev = []) {\n  const dataArr = prev;\n  for (let i = 0; i < 20; i++) {\n    dataArr.push({\n      id: `${i}`,\n      icon: 'https://gw.alipayobjects.com/zos/rmsportal/nywPmnTAvTmLusPxHPSu.png',\n      text: `wine${i}`,\n      price: `${2*i}`\n    });\n  }\n  return dataArr;\n}\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      refreshing: false,\n      down: false,\n      height: document.documentElement.clientHeight,\n      data: [],\n    };\n  }\n  change(state){\n    this.props.history.push({pathname:'/list/'+ state.id})\n  }\n\n  componentDidMount() {\n    const hei = this.state.height - ReactDOM.findDOMNode(this.ptr).offsetTop;\n    setTimeout(() => this.setState({\n      height: hei,\n      data: genData(),\n    }), 0);\n  }\n\n  render() {\n    return (<div>\n      \n      <PullToRefresh\n        damping={100}\n        ref={el => this.ptr = el}\n        style={{\n          height: this.state.height,\n          overflow: 'auto',\n        }}\n        indicator={this.state.down ? {} : { deactivate: '上拉可以刷新' }}\n        direction={'up'}\n        refreshing={this.state.refreshing}\n        onRefresh={() => {\n          this.setState({ \n            refreshing: true ,\n            data: genData(this.state.data)\n          });\n          //this.setState({});\n          setTimeout(() => {\n            this.setState({ refreshing: false });\n          }, 1000);\n        }}\n      >\n        {/* {this.state.data.map(i => (\n          <div key={i} style={{ textAlign: 'center', padding: 20 }}>\n            {this.state.down ? 'pull down' : 'pull up'} {i}\n          </div>\n        ))} */}\n          <Grid data={this.state.data}\n            columnNum={2}\n            hasLine={false}\n            renderItem={dataItem => (\n              <div style={{ padding: '12.5px' }}>\n                <img src={dataItem.icon} style={{ width: '75%'}} alt=\"\" onClick={()=>this.change({'id':dataItem.id})} />\n                <div className=\"name\">\n                  <span>{dataItem.text}</span>\n                </div>\n                <div className=\"price\">\n                  <p>￥{dataItem.price}</p>\n                  <div className=\"buy\" onClick={()=>alert(`${dataItem.id}`)}>立即购买</div>\n                  \n                  <div style={{clear: 'both'}}></div>\n                </div>\n              </div>\n            )}\n          />\n      </PullToRefresh>\n    </div>);\n  }\n}\n\nexport default Demo;","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport { Carousel, WingBlank, Card, WhiteSpace } from 'antd-mobile';\nimport './Detail.css';\n\nclass Detail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goodsID: props.match.params.id,\n            data: ['1', '2', '3'],\n            imgHeight: 176\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                data: ['AiyWuByWklrrUDlFignR', 'TekJlZRVCjLFexlOCuWn', 'IJOtIlfsYdTyaDTRVrLI'],\n            });\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div style={{ paddingTop: '15px' }}>\n                <WingBlank>\n                    <Carousel\n                        autoplay={false}\n                        infinite\n                        beforeChange={(from, to) => console.log(`slide from ${from} to ${to}`)}\n                        afterChange={index => console.log('slide to', index)}\n                    >\n                        {this.state.data.map(val => (\n                            <a\n                                key={val}\n                                href=\"http://www.alipay.com\"\n                                style={{ display: 'inline-block', width: '100%', height: this.state.imgHeight }}\n                            >\n                                <img\n                                    src={`https://zos.alipayobjects.com/rmsportal/${val}.png`}\n                                    alt=\"\"\n                                    style={{ width: '100%', verticalAlign: 'top' }}\n                                    onLoad={() => {\n                                        // fire window resize event to change height\n                                        window.dispatchEvent(new Event('resize'));\n                                        this.setState({ imgHeight: 'auto' });\n                                    }}\n                                />\n                            </a>\n                        ))}\n                    </Carousel>\n                </WingBlank>\n                <h3>用于组织信息和操作，通常也作为详细信息的入口。</h3>\n                <p>￥888</p>\n                <WingBlank size=\"lg\">\n                    <WhiteSpace size=\"lg\" />\n                    <Card>\n                        <Card.Header\n                            title=\"商品详情\"\n                        />\n                        <Card.Body>\n                            <div>\n                                {this.state.data.map(val => (\n                                    <a\n                                        key={val}\n                                        href=\"http://www.alipay.com\"\n                                        style={{ display: 'inline-block', width: '100%', height: this.state.imgHeight }}\n                                    >\n                                        <img\n                                            src={`https://zos.alipayobjects.com/rmsportal/${val}.png`}\n                                            alt=\"\"\n                                            style={{ width: '100%', verticalAlign: 'top' }}\n                                            onLoad={() => {\n                                                // fire window resize event to change height\n                                                window.dispatchEvent(new Event('resize'));\n                                                this.setState({ imgHeight: 'auto' });\n                                            }}\n                                        />\n                                    </a>\n                                ))}\n                            </div>\n                        </Card.Body>\n\n                    </Card>\n                    <WhiteSpace size=\"lg\" />\n                </WingBlank>\n                {this.state.goodsID}\n            </div>\n        )\n    }\n}\n\nexport default Detail;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './home/App';\nimport * as serviceWorker from './serviceWorker';\n// 路由使用 history模式\nimport { HashRouter,Route } from 'react-router-dom';\n// 路由采用 hash模式\n// import { HashRouter } from 'react-router-dom'\nimport Home from './home/App'\nimport List from './list/List'\nimport Detail from './detail/Detail'\n\nReactDOM.render(\n  <HashRouter basename='/wine/'>\n    <Route exact path='/' component={Home}/>\n    <Route exact path='/list' component={List}/>\n    <Route exact path='/list/:id' component={Detail}/>\n  </HashRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}